(()=>{"use strict";var t,n=(t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)},function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),e=function(t,n){this.x=t,this.y=n},r=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.add=function(t){return new e(this.x+t.x,this.y+t.y)},e}(e),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.scale=function(t){return new e(this.x*t,this.y*t)},e.prototype.add=function(t){return new e(this.x+t.x,this.y+t.y)},e}(e),o=function(){function t(t,n,e,r,i){this.position=t,this.v=n,this.theta=e,this.psi=r,this.psi_dot=i}return t.prototype.add=function(n){return new t(this.position.add(n.position),this.v+n.v,this.theta+n.theta,this.psi+n.psi,this.psi_dot+n.psi_dot)},t}(),a=function(){function t(t,n,e,r,i){this.velocity=t,this.a=n,this.theta_dot=e,this.psi_dot=r,this.psi_2dot=i}return t.prototype.add=function(n){return new t(this.velocity.add(n.velocity),this.a+n.a,this.theta_dot+n.theta_dot,this.psi_dot+n.psi_dot,this.psi_2dot+n.psi_2dot)},t.prototype.scale=function(n){return new t(this.velocity.scale(n),this.a*n,this.theta_dot*n,this.psi_dot*n,this.psi_2dot*n)},t.prototype.step=function(t){return new o(this.velocity.scale(t),this.a*t,this.theta_dot*t,this.psi_dot*t,this.psi_2dot*t)},t}(),s=function(){function t(t,n,e,r,i,o,a,s,u,h,c,l){this.mass=t,this.inertia=n,this.g=e,this.rho=r,this.c_d=i,this.c_l=o,this.a_d=a,this.a_l=s,this.col=u,this.cod=h,this.cot=c,this.t=l}return t.prototype.get_acceleration=function(t){var n=Math.sqrt(Math.pow(Math.cos(t.psi)*this.a_l,2)+Math.pow(Math.sin(t.psi)*this.a_d,2)),e=Math.sqrt(Math.pow(Math.sin(t.psi)*this.a_l,2)+Math.pow(Math.cos(t.psi)*this.a_d,2)),r=Math.sin(t.psi)*this.c_l*n*this.rho*t.v*t.v*.5,o=Math.cos(t.psi)*this.c_d*e*this.rho*t.v*t.v*.5,s=this.mass*this.g,u=this.t-o-s*Math.sin(t.theta),h=r-s*Math.cos(t.theta),c=-this.cot.y*this.t+this.col.x*r*Math.cos(t.psi)-this.col.y*r*Math.sin(t.psi)+this.cod.x*o*Math.sin(t.psi)+this.cod.y*o*Math.cos(t.psi),l=h/(this.mass*t.v);return new a(new i(Math.cos(t.theta)*t.v,Math.sin(t.theta)*t.v),u/this.mass,l,t.psi_dot-l,c/this.inertia)},t.prototype.step=function(t,n){var e=this.get_acceleration(t),r=e.step(.5*n),i=this.get_acceleration(t.add(r)),o=i.step(.5*n),a=this.get_acceleration(t.add(o)),s=a.step(n),u=this.get_acceleration(t.add(s));return t.add(e.step(n/6)).add(i.step(n/3)).add(a.step(n/3)).add(u.step(n/6))},t.prototype.step_euler=function(t,n){var e=this.get_acceleration(t);return t.add(e.step(n))},t}(),u=function(){function t(t,n,e,r,i,o,a){this._mass=t,this._headMass=n,this._diameter=e,this._length=r,this._fletchingArea=i,this._c_d=o,this._c_l=a,this._body=this.get_body()}return Object.defineProperty(t.prototype,"mass",{get:function(){return this._mass},set:function(t){this._mass=t,this.update()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"headMass",{get:function(){return this._headMass},set:function(t){this._headMass=t,this.update()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this._length},set:function(t){this._length=t,this.update()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"diameter",{get:function(){return this._diameter},set:function(t){this._diameter=t,this.update()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fletchingArea",{get:function(){return this._fletchingArea},set:function(t){this._fletchingArea=t,this.update()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"c_d",{get:function(){return this._c_d},set:function(t){this._c_d=t,this.update()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"c_l",{get:function(){return this._c_l},set:function(t){this._c_l=t,this.update()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"body",{get:function(){return this._body},enumerable:!1,configurable:!0}),t.prototype.get_body=function(){var t=this._headMass/this._mass,n=this._mass*Math.pow(this._length,2)*(1-t)*(1+3*t)/12,r=this._length/2*t,i=.005*this._fletchingArea,o=Math.PI/4*Math.pow(this._diameter,2),a=(o*this._c_d+i)/o,u=this._length*this._diameter,h=this._fletchingArea+u,c=this._length/2*this._fletchingArea/h,l=new e(-c-r,0),f=l,p=new e(0,0);return new s(this._mass,n,9.8,1.2,a,this._c_l,o,h,l,f,p,0)},t.prototype.update=function(){this._body=this.get_body()},t.prototype.step=function(t,n){return this._body.step(t,n)},t.prototype.step_euler=function(t,n){return this._body.step_euler(t,n)},t}();function h(t,n){let e,r;if(void 0===n)for(const n of t)null!=n&&(void 0===e?n>=n&&(e=r=n):(e>n&&(e=n),r<n&&(r=n)));else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(void 0===e?o>=o&&(e=r=o):(e>o&&(e=o),r<o&&(r=o)))}return[e,r]}function c(t){return t}var l=1e-6;function f(t){return"translate("+t+",0)"}function p(t){return"translate(0,"+t+")"}function d(t){return n=>+t(n)}function g(t,n){return n=Math.max(0,t.bandwidth()-2*n)/2,t.round()&&(n=Math.round(n)),e=>+t(e)+n}function y(){return!this.__axis}function _(t,n){var e=[],r=null,i=null,o=6,a=6,s=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,h=1===t||4===t?-1:1,_=4===t||2===t?"x":"y",m=1===t||3===t?f:p;function v(f){var p=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,v=null==i?n.tickFormat?n.tickFormat.apply(n,e):c:i,w=Math.max(o,0)+s,x=n.range(),b=+x[0]+u,M=+x[x.length-1]+u,A=(n.bandwidth?g:d)(n.copy(),u),k=f.selection?f.selection():f,N=k.selectAll(".domain").data([null]),E=k.selectAll(".tick").data(p,n).order(),S=E.exit(),C=E.enter().append("g").attr("class","tick"),P=E.select("line"),T=E.select("text");N=N.merge(N.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),E=E.merge(C),P=P.merge(C.append("line").attr("stroke","currentColor").attr(_+"2",h*o)),T=T.merge(C.append("text").attr("fill","currentColor").attr(_,h*w).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==k&&(N=N.transition(f),E=E.transition(f),P=P.transition(f),T=T.transition(f),S=S.transition(f).attr("opacity",l).attr("transform",(function(t){return isFinite(t=A(t))?m(t+u):this.getAttribute("transform")})),C.attr("opacity",l).attr("transform",(function(t){var n=this.parentNode.__axis;return m((n&&isFinite(n=n(t))?n:A(t))+u)}))),S.remove(),N.attr("d",4===t||2===t?a?"M"+h*a+","+b+"H"+u+"V"+M+"H"+h*a:"M"+u+","+b+"V"+M:a?"M"+b+","+h*a+"V"+u+"H"+M+"V"+h*a:"M"+b+","+u+"H"+M),E.attr("opacity",1).attr("transform",(function(t){return m(A(t)+u)})),P.attr(_+"2",h*o),T.attr(_,h*w).text(v),k.filter(y).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),k.each((function(){this.__axis=A}))}return v.scale=function(t){return arguments.length?(n=t,v):n},v.ticks=function(){return e=Array.from(arguments),v},v.tickArguments=function(t){return arguments.length?(e=null==t?[]:Array.from(t),v):e.slice()},v.tickValues=function(t){return arguments.length?(r=null==t?null:Array.from(t),v):r&&r.slice()},v.tickFormat=function(t){return arguments.length?(i=t,v):i},v.tickSize=function(t){return arguments.length?(o=a=+t,v):o},v.tickSizeInner=function(t){return arguments.length?(o=+t,v):o},v.tickSizeOuter=function(t){return arguments.length?(a=+t,v):a},v.tickPadding=function(t){return arguments.length?(s=+t,v):s},v.offset=function(t){return arguments.length?(u=+t,v):u},v}function m(){}function v(t){return null==t?m:function(){return this.querySelector(t)}}function w(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function x(){return[]}function b(t){return null==t?x:function(){return this.querySelectorAll(t)}}function M(t){return function(){return this.matches(t)}}function A(t){return function(n){return n.matches(t)}}var k=Array.prototype.find;function N(){return this.firstElementChild}var E=Array.prototype.filter;function S(){return Array.from(this.children)}function C(t){return new Array(t.length)}function P(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function T(t){return function(){return t}}function O(t,n,e,r,i,o){for(var a,s=0,u=n.length,h=o.length;s<h;++s)(a=n[s])?(a.__data__=o[s],r[s]=a):e[s]=new P(t,o[s]);for(;s<u;++s)(a=n[s])&&(i[s]=a)}function j(t,n,e,r,i,o,a){var s,u,h,c=new Map,l=n.length,f=o.length,p=new Array(l);for(s=0;s<l;++s)(u=n[s])&&(p[s]=h=a.call(u,u.__data__,s,n)+"",c.has(h)?i[s]=u:c.set(h,u));for(s=0;s<f;++s)h=a.call(t,o[s],s,o)+"",(u=c.get(h))?(r[s]=u,u.__data__=o[s],c.delete(h)):e[s]=new P(t,o[s]);for(s=0;s<l;++s)(u=n[s])&&c.get(p[s])===u&&(i[s]=u)}function q(t){return t.__data__}function I(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function L(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}P.prototype={constructor:P,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var X="http://www.w3.org/1999/xhtml";const R={svg:"http://www.w3.org/2000/svg",xhtml:X,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function z(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),R.hasOwnProperty(n)?{space:R[n],local:t}:t}function F(t){return function(){this.removeAttribute(t)}}function D(t){return function(){this.removeAttributeNS(t.space,t.local)}}function H(t,n){return function(){this.setAttribute(t,n)}}function B(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function V(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Y(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function $(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function G(t){return function(){this.style.removeProperty(t)}}function U(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Z(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function K(t,n){return t.style.getPropertyValue(n)||$(t).getComputedStyle(t,null).getPropertyValue(n)}function Q(t){return function(){delete this[t]}}function W(t,n){return function(){this[t]=n}}function J(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function tt(t){return t.trim().split(/^|\s+/)}function nt(t){return t.classList||new et(t)}function et(t){this._node=t,this._names=tt(t.getAttribute("class")||"")}function rt(t,n){for(var e=nt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function it(t,n){for(var e=nt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ot(t){return function(){rt(this,t)}}function at(t){return function(){it(this,t)}}function st(t,n){return function(){(n.apply(this,arguments)?rt:it)(this,t)}}function ut(){this.textContent=""}function ht(t){return function(){this.textContent=t}}function ct(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function lt(){this.innerHTML=""}function ft(t){return function(){this.innerHTML=t}}function pt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function dt(){this.nextSibling&&this.parentNode.appendChild(this)}function gt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function yt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===X&&n.documentElement.namespaceURI===X?n.createElement(t):n.createElementNS(e,t)}}function _t(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function mt(t){var n=z(t);return(n.local?_t:yt)(n)}function vt(){return null}function wt(){var t=this.parentNode;t&&t.removeChild(this)}function xt(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function bt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Mt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function At(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function kt(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function Nt(t,n,e){var r=$(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Et(t,n){return function(){return Nt(this,t,n)}}function St(t,n){return function(){return Nt(this,t,n.apply(this,arguments))}}et.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Ct=[null];function Pt(t,n){this._groups=t,this._parents=n}function Tt(){return new Pt([[document.documentElement]],Ct)}Pt.prototype=Tt.prototype={constructor:Pt,select:function(t){"function"!=typeof t&&(t=v(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,s=n[i],u=s.length,h=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),h[c]=a);return new Pt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return w(t.apply(this,arguments))}}(t):b(t);for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,s=n[o],u=s.length,h=0;h<u;++h)(a=s[h])&&(r.push(t.call(a,a.__data__,h,s)),i.push(a));return new Pt(r,i)},selectChild:function(t){return this.select(null==t?N:function(t){return function(){return k.call(this.children,t)}}("function"==typeof t?t:A(t)))},selectChildren:function(t){return this.selectAll(null==t?S:function(t){return function(){return E.call(this.children,t)}}("function"==typeof t?t:A(t)))},filter:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],h=0;h<s;++h)(o=a[h])&&t.call(o,o.__data__,h,a)&&u.push(o);return new Pt(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,q);var e=n?j:O,r=this._parents,i=this._groups;"function"!=typeof t&&(t=T(t));for(var o=i.length,a=new Array(o),s=new Array(o),u=new Array(o),h=0;h<o;++h){var c=r[h],l=i[h],f=l.length,p=I(t.call(c,c&&c.__data__,h,r)),d=p.length,g=s[h]=new Array(d),y=a[h]=new Array(d),_=u[h]=new Array(f);e(c,l,g,y,_,p,n);for(var m,v,w=0,x=0;w<d;++w)if(m=g[w]){for(w>=x&&(x=w+1);!(v=y[x])&&++x<d;);m._next=v||null}}return(a=new Pt(a,r))._enter=s,a._exit=u,a},enter:function(){return new Pt(this._enter||this._groups.map(C),this._parents)},exit:function(){return new Pt(this._exit||this._groups.map(C),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),s=new Array(i),u=0;u<a;++u)for(var h,c=e[u],l=r[u],f=c.length,p=s[u]=new Array(f),d=0;d<f;++d)(h=c[d]||l[d])&&(p[d]=h);for(;u<i;++u)s[u]=e[u];return new Pt(s,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=L);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,s=e[o],u=s.length,h=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(h[c]=a);h.sort(n)}return new Pt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=z(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?D:F:"function"==typeof n?e.local?Y:V:e.local?B:H)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?G:"function"==typeof n?Z:U)(t,n,null==e?"":e)):K(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Q:"function"==typeof n?J:W)(t,n)):this.node()[t]},classed:function(t,n){var e=tt(t+"");if(arguments.length<2){for(var r=nt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?st:n?ot:at)(e,n))},text:function(t){return arguments.length?this.each(null==t?ut:("function"==typeof t?ct:ht)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?lt:("function"==typeof t?pt:ft)(t)):this.node().innerHTML},raise:function(){return this.each(dt)},lower:function(){return this.each(gt)},append:function(t){var n="function"==typeof t?t:mt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:mt(t),r=null==n?vt:"function"==typeof n?n:v(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(wt)},clone:function(t){return this.select(t?bt:xt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Mt(t+""),a=o.length;if(!(arguments.length<2)){for(s=n?kt:At,r=0;r<a;++r)this.each(s(o[r],n,e));return this}var s=this.node().__on;if(s)for(var u,h=0,c=s.length;h<c;++h)for(r=0,u=s[h];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,n){return this.each(("function"==typeof n?St:Et)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const Ot=Tt;var jt={value:()=>{}};function qt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new It(r)}function It(t){this._=t}function Lt(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function Xt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Rt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=jt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}It.prototype=qt.prototype={constructor:It,on:function(t,n){var e,r=this._,i=Lt(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=Rt(r[e],t.name,n);else if(null==n)for(e in r)r[e]=Rt(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=Xt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new It(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const zt=qt;var Ft,Dt,Ht=0,Bt=0,Vt=0,Yt=0,$t=0,Gt=0,Ut="object"==typeof performance&&performance.now?performance:Date,Zt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Kt(){return $t||(Zt(Qt),$t=Ut.now()+Gt)}function Qt(){$t=0}function Wt(){this._call=this._time=this._next=null}function Jt(t,n,e){var r=new Wt;return r.restart(t,n,e),r}function tn(){$t=(Yt=Ut.now())+Gt,Ht=Bt=0;try{!function(){Kt(),++Ht;for(var t,n=Ft;n;)(t=$t-n._time)>=0&&n._call.call(void 0,t),n=n._next;--Ht}()}finally{Ht=0,function(){for(var t,n,e=Ft,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ft=n);Dt=t,en(r)}(),$t=0}}function nn(){var t=Ut.now(),n=t-Yt;n>1e3&&(Gt-=n,Yt=t)}function en(t){Ht||(Bt&&(Bt=clearTimeout(Bt)),t-$t>24?(t<1/0&&(Bt=setTimeout(tn,t-Ut.now()-Gt)),Vt&&(Vt=clearInterval(Vt))):(Vt||(Yt=Ut.now(),Vt=setInterval(nn,1e3)),Ht=1,Zt(tn)))}function rn(t,n,e){var r=new Wt;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}Wt.prototype=Jt.prototype={constructor:Wt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Kt():+e)+(null==n?0:+n),this._next||Dt===this||(Dt?Dt._next=this:Ft=this,Dt=this),this._call=t,this._time=e,en()},stop:function(){this._call&&(this._call=null,this._time=1/0,en())}};var on=zt("start","end","cancel","interrupt"),an=[];function sn(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(u){var h,c,l,f;if(1!==e.state)return s();for(h in i)if((f=i[h]).name===e.name){if(3===f.state)return rn(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[h]):+h<n&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[h])}if(rn((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(u))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),h=0,c=-1;h<l;++h)(f=e.tween[h].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Jt((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on,tween:an,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function un(t,n){var e=cn(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function hn(t,n){var e=cn(t,n);if(e.state>3)throw new Error("too late; already running");return e}function cn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function ln(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var fn,pn=180/Math.PI,dn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function gn(t,n,e,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(u=t*e+n*r)&&(e-=t*u,r-=n*u),(s=Math.sqrt(e*e+r*r))&&(e/=s,r/=s,u/=s),t*r<n*e&&(t=-t,n=-n,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*pn,skewX:Math.atan(u)*pn,scaleX:a,scaleY:s}}function yn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,n,null,e);s.push({i:u-4,x:ln(t,i)},{i:u-2,x:ln(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:ln(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,s,u),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:ln(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,s,u),function(t,n,e,r,o,a){if(t!==e||n!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:ln(t,e)},{i:s-2,x:ln(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var n,e=-1,r=u.length;++e<r;)s[(n=u[e]).i]=n.x(t);return s.join("")}}}var _n=yn((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?dn:gn(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),mn=yn((function(t){return null==t?dn:(fn||(fn=document.createElementNS("http://www.w3.org/2000/svg","g")),fn.setAttribute("transform",t),(t=fn.transform.baseVal.consolidate())?gn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):dn)}),", ",")",")");function vn(t,n){var e,r;return function(){var i=hn(this,t),o=i.tween;if(o!==e)for(var a=0,s=(r=e=o).length;a<s;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function wn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=hn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:n,value:e},u=0,h=i.length;u<h;++u)if(i[u].name===n){i[u]=s;break}u===h&&i.push(s)}o.tween=i}}function xn(t,n,e){var r=t._id;return t.each((function(){var t=hn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return cn(t,r).value[n]}}function bn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Mn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function An(){}var kn=.7,Nn=1/kn,En="\\s*([+-]?\\d+)\\s*",Sn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Cn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Pn=/^#([0-9a-f]{3,8})$/,Tn=new RegExp("^rgb\\("+[En,En,En]+"\\)$"),On=new RegExp("^rgb\\("+[Cn,Cn,Cn]+"\\)$"),jn=new RegExp("^rgba\\("+[En,En,En,Sn]+"\\)$"),qn=new RegExp("^rgba\\("+[Cn,Cn,Cn,Sn]+"\\)$"),In=new RegExp("^hsl\\("+[Sn,Cn,Cn]+"\\)$"),Ln=new RegExp("^hsla\\("+[Sn,Cn,Cn,Sn]+"\\)$"),Xn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Rn(){return this.rgb().formatHex()}function zn(){return this.rgb().formatRgb()}function Fn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Pn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Dn(n):3===e?new Yn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Hn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Hn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Tn.exec(t))?new Yn(n[1],n[2],n[3],1):(n=On.exec(t))?new Yn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=jn.exec(t))?Hn(n[1],n[2],n[3],n[4]):(n=qn.exec(t))?Hn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=In.exec(t))?Zn(n[1],n[2]/100,n[3]/100,1):(n=Ln.exec(t))?Zn(n[1],n[2]/100,n[3]/100,n[4]):Xn.hasOwnProperty(t)?Dn(Xn[t]):"transparent"===t?new Yn(NaN,NaN,NaN,0):null}function Dn(t){return new Yn(t>>16&255,t>>8&255,255&t,1)}function Hn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Yn(t,n,e,r)}function Bn(t){return t instanceof An||(t=Fn(t)),t?new Yn((t=t.rgb()).r,t.g,t.b,t.opacity):new Yn}function Vn(t,n,e,r){return 1===arguments.length?Bn(t):new Yn(t,n,e,null==r?1:r)}function Yn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function $n(){return"#"+Un(this.r)+Un(this.g)+Un(this.b)}function Gn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Un(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Zn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Qn(t,n,e,r)}function Kn(t){if(t instanceof Qn)return new Qn(t.h,t.s,t.l,t.opacity);if(t instanceof An||(t=Fn(t)),!t)return new Qn;if(t instanceof Qn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=n===o?(e-r)/s+6*(e<r):e===o?(r-n)/s+2:(n-e)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new Qn(a,s,u,t.opacity)}function Qn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Wn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Jn(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}bn(An,Fn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Rn,formatHex:Rn,formatHsl:function(){return Kn(this).formatHsl()},formatRgb:zn,toString:zn}),bn(Yn,Vn,Mn(An,{brighter:function(t){return t=null==t?Nn:Math.pow(Nn,t),new Yn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?kn:Math.pow(kn,t),new Yn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:$n,formatHex:$n,formatRgb:Gn,toString:Gn})),bn(Qn,(function(t,n,e,r){return 1===arguments.length?Kn(t):new Qn(t,n,e,null==r?1:r)}),Mn(An,{brighter:function(t){return t=null==t?Nn:Math.pow(Nn,t),new Qn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?kn:Math.pow(kn,t),new Qn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Yn(Wn(t>=240?t-240:t+120,i,r),Wn(t,i,r),Wn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const te=t=>()=>t;function ne(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):te(isNaN(t)?n:t)}const ee=function t(n){var e=function(t){return 1==(t=+t)?ne:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):te(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Vn(t)).r,(n=Vn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=ne(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function re(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),s=new Array(i);for(e=0;e<i;++e)r=Vn(n[e]),o[e]=r.r||0,a[e]=r.g||0,s[e]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}re((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<n-1?t[r+2]:2*o-i;return Jn((e-r/n)*n,a,i,o,s)}})),re((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],s=t[(r+2)%n];return Jn((e-r/n)*n,i,o,a,s)}}));var ie=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,oe=new RegExp(ie.source,"g");function ae(t,n){var e,r,i,o=ie.lastIndex=oe.lastIndex=0,a=-1,s=[],u=[];for(t+="",n+="";(e=ie.exec(t))&&(r=oe.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(e=e[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:ln(e,r)})),o=oe.lastIndex;return o<n.length&&(i=n.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(n){return t(n)+""}}(u[0].x):function(t){return function(){return t}}(n):(n=u.length,function(t){for(var e,r=0;r<n;++r)s[(e=u[r]).i]=e.x(t);return s.join("")})}function se(t,n){var e;return("number"==typeof n?ln:n instanceof Fn?ee:(e=Fn(n))?(n=e,ee):ae)(t,n)}function ue(t){return function(){this.removeAttribute(t)}}function he(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ce(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function le(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function fe(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttribute(t)}}function pe(t,n,e){var r,i,o;return function(){var a,s,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=n(r=a,u));this.removeAttributeNS(t.space,t.local)}}function de(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function ge(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function ye(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ge(t,i)),e}return i._value=n,i}function _e(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&de(t,i)),e}return i._value=n,i}function me(t,n){return function(){un(this,t).delay=+n.apply(this,arguments)}}function ve(t,n){return n=+n,function(){un(this,t).delay=n}}function we(t,n){return function(){hn(this,t).duration=+n.apply(this,arguments)}}function xe(t,n){return n=+n,function(){hn(this,t).duration=n}}function be(t,n){if("function"!=typeof n)throw new Error;return function(){hn(this,t).ease=n}}function Me(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?un:hn;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(n,e),a.on=i}}var Ae=Ot.prototype.constructor;function ke(t){return function(){this.style.removeProperty(t)}}function Ne(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Ee(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Ne(t,o,e)),r}return o._value=n,o}function Se(t){return function(n){this.textContent=t.call(this,n)}}function Ce(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Se(r)),n}return r._value=t,r}var Pe=0;function Te(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Oe(){return++Pe}var je=Ot.prototype;Te.prototype=function(t){return Ot().transition(t)}.prototype={constructor:Te,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=v(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,h=r[a],c=h.length,l=o[a]=new Array(c),f=0;f<c;++f)(s=h[f])&&(u=t.call(s,s.__data__,f,h))&&("__data__"in s&&(u.__data__=s.__data__),l[f]=u,sn(l[f],n,e,f,l,cn(s,e)));return new Te(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=b(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,h=r[s],c=h.length,l=0;l<c;++l)if(u=h[l]){for(var f,p=t.call(u,u.__data__,l,h),d=cn(u,e),g=0,y=p.length;g<y;++g)(f=p[g])&&sn(f,n,e,g,p,d);o.push(p),a.push(u)}return new Te(o,a,n,e)},selectChild:je.selectChild,selectChildren:je.selectChildren,filter:function(t){"function"!=typeof t&&(t=M(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],s=a.length,u=r[i]=[],h=0;h<s;++h)(o=a[h])&&t.call(o,o.__data__,h,a)&&u.push(o);return new Te(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,h=n[s],c=e[s],l=h.length,f=a[s]=new Array(l),p=0;p<l;++p)(u=h[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=n[s];return new Te(a,this._parents,this._name,this._id)},selection:function(){return new Ae(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Oe(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,h=0;h<u;++h)if(a=s[h]){var c=cn(a,n);sn(a,t,e,h,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Te(r,this._parents,t,e)},call:je.call,nodes:je.nodes,node:je.node,size:je.size,empty:je.empty,each:je.each,on:function(t,n){var e=this._id;return arguments.length<2?cn(this.node(),e).on.on(t):this.each(Me(e,t,n))},attr:function(t,n){var e=z(t),r="transform"===e?mn:se;return this.attrTween(t,"function"==typeof n?(e.local?pe:fe)(e,r,xn(this,"attr."+t,n)):null==n?(e.local?he:ue)(e):(e.local?le:ce)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=z(t);return this.tween(e,(r.local?ye:_e)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?_n:se;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=K(this,t),a=(this.style.removeProperty(t),K(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,ke(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=K(this,t),s=e(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=K(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=n(r=a,s))}}(t,r,xn(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,s="end."+a;return function(){var u=hn(this,t),h=u.on,c=null==u.value[a]?o||(o=ke(n)):void 0;h===e&&i===c||(r=(e=h).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=K(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Ee(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(xn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Ce(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=cn(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?vn:wn)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?me:ve)(n,t)):cn(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?we:xe)(n,t)):cn(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(be(n,t)):cn(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;hn(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};e.each((function(){var e=hn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(s),n._.interrupt.push(s),n._.end.push(u)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:je[Symbol.iterator]};var qe={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ie(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}Ot.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},Ot.prototype.transition=function(t){var n,e;t instanceof Te?(n=t._id,t=t._name):(n=Oe(),(e=qe).time=Kt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,h=0;h<u;++h)(a=s[h])&&sn(a,t,n,h,s,e||Ie(a,n));return new Te(r,this._parents,t,n)};const{abs:Le,max:Xe,min:Re}=Math;function ze(t){return{type:t}}["w","e"].map(ze),["n","s"].map(ze),["n","w","e","s","nw","ne","sw","se"].map(ze);var Fe=Math.sqrt(50),De=Math.sqrt(10),He=Math.sqrt(2);function Be(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=Fe?10:o>=De?5:o>=He?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=Fe?10:o>=De?5:o>=He?2:1)}function Ve(t,n){return null==t||null==n?NaN:t<n?-1:t>n?1:t>=n?0:NaN}function Ye(t){let n=t,e=t,r=t;function i(t,n,i=0,o=t.length){if(i<o){if(0!==e(n,n))return o;do{const e=i+o>>>1;r(t[e],n)<0?i=e+1:o=e}while(i<o)}return i}return 1===t.length&&(n=(n,e)=>t(n)-e,e=Ve,r=(n,e)=>Ve(t(n),e)),{left:i,center:function(t,e,r=0,o=t.length){const a=i(t,e,r,o-1);return a>r&&n(t[a-1],e)>-n(t[a],e)?a-1:a},right:function(t,n,i=0,o=t.length){if(i<o){if(0!==e(n,n))return o;do{const e=i+o>>>1;r(t[e],n)<=0?i=e+1:o=e}while(i<o)}return i}}}const $e=Ye(Ve),Ge=$e.right,Ue=($e.left,Ye((function(t){return null===t?NaN:+t})).center,Ge);function Ze(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Je(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function Ke(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Qe(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Je(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}function We(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function Je(t,n){var e,r,i=typeof n;return null==n||"boolean"===i?te(n):("number"===i?ln:"string"===i?(e=Fn(n))?(n=e,ee):ae:n instanceof Fn?ee:n instanceof Date?Ke:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?Ze:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Qe:ln:We))(t,n)}function tr(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function nr(t){return+t}var er=[0,1];function rr(t){return t}function ir(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function or(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=ir(i,r),o=e(a,o)):(r=ir(r,i),o=e(o,a)),function(t){return o(r(t))}}function ar(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=ir(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=Ue(t,n,1,r)-1;return o[e](i[e](n))}}function sr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function ur(){return function(){var t,n,e,r,i,o,a=er,s=er,u=Je,h=rr;function c(){var t,n,e,u=Math.min(a.length,s.length);return h!==rr&&(t=a[0],n=a[u-1],t>n&&(e=t,t=n,n=e),h=function(e){return Math.max(t,Math.min(n,e))}),r=u>2?ar:or,i=o=null,l}function l(n){return null==n||isNaN(n=+n)?e:(i||(i=r(a.map(t),s,u)))(t(h(n)))}return l.invert=function(e){return h(n((o||(o=r(s,a.map(t),ln)))(e)))},l.domain=function(t){return arguments.length?(a=Array.from(t,nr),c()):a.slice()},l.range=function(t){return arguments.length?(s=Array.from(t),c()):s.slice()},l.rangeRound=function(t){return s=Array.from(t),u=tr,c()},l.clamp=function(t){return arguments.length?(h=!!t||rr,c()):h!==rr},l.interpolate=function(t){return arguments.length?(u=t,c()):u},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,c()}}()(rr,rr)}function hr(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var cr,lr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function fr(t){if(!(n=lr.exec(t)))throw new Error("invalid format: "+t);var n;return new pr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function pr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function dr(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function gr(t){return(t=dr(Math.abs(t)))?t[1]:NaN}function yr(t,n){var e=dr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}fr.prototype=pr.prototype,pr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const _r={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>yr(100*t,n),r:yr,s:function(t,n){var e=dr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(cr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+dr(t,Math.max(0,n+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function mr(t){return t}var vr,wr,xr,br=Array.prototype.map,Mr=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Ar(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,o,a,s=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=Be(t,n,e))||!isFinite(a))return[];if(a>0){let e=Math.round(t/a),r=Math.round(n/a);for(e*a<t&&++e,r*a>n&&--r,o=new Array(i=r-e+1);++s<i;)o[s]=(e+s)*a}else{a=-a;let e=Math.round(t*a),r=Math.round(n*a);for(e/a<t&&++e,r/a>n&&--r,o=new Array(i=r-e+1);++s<i;)o[s]=(e+s)/a}return r&&o.reverse(),o}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return function(t,n,e,r){var i,o=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=Fe?i*=10:o>=De?i*=5:o>=He&&(i*=2),n<t?-i:i}(t,n,e);switch((r=fr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(gr(n)/3)))-gr(Math.abs(t)))}(o,a))||(r.precision=i),xr(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,gr(n)-gr(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-gr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return wr(r)}(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,o=n(),a=0,s=o.length-1,u=o[a],h=o[s],c=10;for(h<u&&(i=u,u=h,h=i,i=a,a=s,s=i);c-- >0;){if((i=Be(u,h,e))===r)return o[a]=u,o[s]=h,n(o);if(i>0)u=Math.floor(u/i)*i,h=Math.ceil(h/i)*i;else{if(!(i<0))break;u=Math.ceil(u*i)/i,h=Math.floor(h*i)/i}r=i}return t},t}function kr(){var t=ur();return t.copy=function(){return sr(t,kr())},hr.apply(t,arguments),Ar(t)}vr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?mr:(n=br.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=n[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?mr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(br.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",h=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=fr(t)).fill,e=t.align,l=t.sign,f=t.symbol,p=t.zero,d=t.width,g=t.comma,y=t.precision,_=t.trim,m=t.type;"n"===m?(g=!0,m="g"):_r[m]||(void 0===y&&(y=12),_=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var v="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===f?o:/[%p]/.test(m)?u:"",x=_r[m],b=/[defgprs%]/.test(m);function M(t){var i,o,u,f=v,M=w;if("c"===m)M=x(t)+M,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),y),_&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==l&&(A=!1),f=(A?"("===l?l:h:"-"===l||"("===l?"":l)+f,M=("s"===m?Mr[8+cr/3]:"")+M+(A&&"("===l?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){M=(46===u?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!p&&(t=r(t,1/0));var k=f.length+t.length+M.length,N=k<d?new Array(d-k+1).join(n):"";switch(g&&p&&(t=r(N+t,N.length?d-M.length:1/0),N=""),e){case"<":t=f+t+M+N;break;case"=":t=f+N+t+M;break;case"^":t=N.slice(0,k=N.length>>1)+f+t+M+N.slice(k);break;default:t=N+f+t+M}return s(t)}return y=void 0===y?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=fr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(gr(n)/3))),i=Math.pow(10,-r),o=Mr[8+r/3];return function(t){return e(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),wr=vr.format,xr=vr.formatPrefix;const Nr=Math.PI,Er=2*Nr,Sr=1e-6,Cr=Er-Sr;function Pr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Tr(){return new Pr}Pr.prototype=Tr.prototype={constructor:Pr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,s=e-t,u=r-n,h=o-t,c=a-n,l=h*h+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>Sr)if(Math.abs(c*s-u*h)>Sr&&i){var f=e-o,p=r-a,d=s*s+u*u,g=f*f+p*p,y=Math.sqrt(d),_=Math.sqrt(l),m=i*Math.tan((Nr-Math.acos((d+l-g)/(2*y*_)))/2),v=m/_,w=m/y;Math.abs(v-1)>Sr&&(this._+="L"+(t+v*h)+","+(n+v*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>h*p)+","+(this._x1=t+w*s)+","+(this._y1=n+w*u)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),s=e*Math.sin(r),u=t+a,h=n+s,c=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+u+","+h:(Math.abs(this._x1-u)>Sr||Math.abs(this._y1-h)>Sr)&&(this._+="L"+u+","+h),e&&(l<0&&(l=l%Er+Er),l>Cr?this._+="A"+e+","+e+",0,1,"+c+","+(t-a)+","+(n-s)+"A"+e+","+e+",0,1,"+c+","+(this._x1=u)+","+(this._y1=h):l>Sr&&(this._+="A"+e+","+e+",0,"+ +(l>=Nr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const Or=Tr;function jr(t){return function(){return t}}function qr(t){this._context=t}function Ir(t){return new qr(t)}function Lr(t){return t[0]}function Xr(t){return t[1]}function Rr(t,n){var e=jr(!0),r=null,i=Ir,o=null;function a(a){var s,u,h,c=(a=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(a)).length,l=!1;for(null==r&&(o=i(h=Or())),s=0;s<=c;++s)!(s<c&&e(u=a[s],s,a))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(u,s,a),+n(u,s,a));if(h)return o=null,h+""||null}return t="function"==typeof t?t:void 0===t?Lr:jr(t),n="function"==typeof n?n:void 0===n?Xr:jr(n),a.x=function(n){return arguments.length?(t="function"==typeof n?n:jr(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:jr(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:jr(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}function zr(t,n,e){this.k=t,this.x=n,this.y=e}Array.prototype.slice,qr.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},zr.prototype={constructor:zr,scale:function(t){return 1===t?this:new zr(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new zr(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new zr(1,0,0),zr.prototype;for(var Fr,Dr=function(){function t(t,n,e){var r=this;this.margin={top:10,right:30,bottom:30,left:60},this.width=800-this.margin.left-this.margin.right,this.height=400-this.margin.top-this.margin.bottom,this.svg=function(t){return"string"==typeof t?new Pt([[document.querySelector(t)]],[document.documentElement]):new Pt([[t]],Ct)}(t).append("svg").attr("width",this.width+this.margin.left+this.margin.right).attr("height",this.height+this.margin.top+this.margin.bottom).append("g").attr("transform","translate("+this.margin.left+","+this.margin.top+")"),this.xScale=kr().range([0,this.width]),this.xAxis=_(3,this.xScale),this.xAxisGroup=this.svg.append("g").classed("x",!0).classed("axis",!0).attr("transform","translate(0,"+this.height+")").call(this.xAxis),this.yScale=kr().range([this.height,0]),this.yAxis=_(4,this.yScale),this.yAxisGroup=this.svg.append("g").classed("y",!0).classed("axis",!0).call(this.yAxis),this.xExtractor=n,this.yExtractor=e,this.path=this.svg.append("path").datum([]).attr("fill","none").attr("stroke","steelblue").attr("stroke-width",1.5).attr("d",Rr().x((function(t){return r.xScale(r.xExtractor(t))})).y((function(t){return r.yScale(r.yExtractor(t))})))}return t.prototype.plot=function(t){var n=this,e=h(t,this.xExtractor).map((function(t){return t})),r=h(t,this.yExtractor).map((function(t){return t}));r[0]=0,e[0]=0,this.xScale.domain(e),this.yScale.domain(r),this.xAxisGroup.call(this.xAxis),this.yAxisGroup.call(this.yAxis),this.path.datum(t).attr("d",Rr().x((function(t){return n.xScale(n.xExtractor(t))})).y((function(t){return n.yScale(n.yExtractor(t))})))},t}(),Hr=function(){function t(t,n,e,r,i,o,a,s){this.control=null,this.callback=t,this.tag=n,this.min=r,this.max=i,this.doc=s,this.label=e,this.value=o,this.scale=a}return t.prototype.node=function(){var t=this,n=this.doc.createElement("div");n.setAttribute("id",this.tag),n.classList.add("ctrl"),this.control=this.doc.createElement("input"),this.control.setAttribute("type","number");var e=this.tag+"_control";this.control.setAttribute("id",e),this.control.setAttribute("min",this.min.toString()),this.control.setAttribute("max",this.max.toString());var r=Math.pow(10,Math.ceil(Math.log10((this.max-this.min)/100)));this.control.setAttribute("step",r.toString()),this.control.setAttribute("value",(this.value/this.scale).toFixed(3)),this.control.addEventListener("change",(function(n){var e=n.target;t.callback(+e.value*t.scale)}));var i=this.doc.createElement("label");return i.setAttribute("for",e),i.innerText=this.label,n.appendChild(this.control),n.appendChild(i),n},t}(),Br=new u(.065,.03,.012,.3,.002,1.86,.4),Vr=new o(new r(0,2),55,45*Math.PI/180,0,0),Yr=.001,$r=[],Gr=new Dr("#graph",(function(t){return t.position.x}),(function(t){return t.position.y})),Ur=document.getElementById("controls"),Zr=[new Hr((function(t){Vr.v=t}),"speed","Initial Speed (m/2)",0,100,Vr.v,1,document),new Hr((function(t){Vr.theta=t}),"launch_angle","Initial Angle (deg)",0,90,Vr.theta,Math.PI/180,document),new Hr((function(t){Vr.psi=t}),"angle_of_attack","Angle of Attack (deg)",-10,10,Vr.psi,Math.PI/180,document),new Hr((function(t){Vr.position.y=t}),"launch_height","Launch Height (m)",0,10,Vr.position.y,1,document),new Hr((function(t){Br.mass=t}),"mass","Total Mass (g)",0,2e3,Br.mass,.001,document),new Hr((function(t){Br.headMass=t}),"headMass","Head Mass (g)",0,1e3,Br.headMass,.001,document),new Hr((function(t){Br.length=t}),"length","Length (cm)",0,200,Br.length,.01,document),new Hr((function(t){Br.diameter=t}),"diameter","Diameter (mm)",0,50,Br.diameter,.001,document),new Hr((function(t){Br.fletchingArea=t}),"fletchingArea","Fletching Area (cm^2)",0,1e3,Br.fletchingArea,1e-4,document),new Hr((function(t){Br.c_d=t}),"c_d","Coefficient of Drag",0,5,Br.c_d,1,document),new Hr((function(t){Br.c_l=t}),"c_l","Coefficient of Lift",0,2,Br.c_l,1,document),new Hr((function(t){Yr=t}),"dt","Time Delta",1e-4,.1,Yr,1,document)],Kr=document.createElement("table"),Qr=Kr.createTBody(),Wr=0,Jr=Qr.insertRow(),ti=0,ni=Zr;ti<ni.length;ti++){var ei=ni[ti];Jr.insertCell().appendChild(ei.node()),null===(Fr=ei.control)||void 0===Fr||Fr.addEventListener("change",si),++Wr>=3&&(Jr=Qr.insertRow(),Wr=0)}null==Ur||Ur.appendChild(Kr),document.createElement("table");var ri=document.getElementById("energy"),ii=document.getElementById("time_of_flight"),oi=document.getElementById("momentum"),ai=document.getElementById("total_distance");function si(){$r=[];for(var t=Vr,n=0,e=0;t.position.y>0&&($r.push({position:t.position,v:t.v,theta:t.theta,psi:t.psi,psi_dot:t.psi_dot,t:n}),t=Br.step(t,Yr),n+=Yr,!(e>1e5));)e++;Gr.plot($r),ri&&(ri.innerText=(Math.pow(t.v,2)*Br.mass*.5).toFixed(2)),ii&&(ii.innerText=n.toFixed(2)),oi&&(oi.innerText=(t.v*Br.mass).toFixed(2)),ai&&(ai.innerText=t.position.x.toFixed(2))}si()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,